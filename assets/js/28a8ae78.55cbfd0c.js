"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[8631],{1396:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var l=a(7462),i=(a(7294),a(3905));a(1839);const s={},n="TextFileView",o={unversionedId:"reference/typescript/classes/TextFileView",id:"reference/typescript/classes/TextFileView",title:"TextFileView",description:"Extends EditableFileView",source:"@site/docs/reference/typescript/classes/TextFileView.md",sourceDirName:"reference/typescript/classes",slug:"/reference/typescript/classes/TextFileView",permalink:"/obsidian-plugin-docs/reference/typescript/classes/TextFileView",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/classes/TextFileView.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"TextComponent",permalink:"/obsidian-plugin-docs/reference/typescript/classes/TextComponent"},next:{title:"ToggleComponent",permalink:"/obsidian-plugin-docs/reference/typescript/classes/ToggleComponent"}},r={},d=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:2},{value:"data",id:"data",level:3},{value:"requestSave",id:"requestsave",level:3},{value:"Methods",id:"methods",level:2},{value:"onUnloadFile",id:"onunloadfile",level:3},{value:"onLoadFile",id:"onloadfile",level:3},{value:"save",id:"save",level:3},{value:"getViewData",id:"getviewdata",level:3},{value:"setViewData",id:"setviewdata",level:3},{value:"clear",id:"clear",level:3}],c={toc:d};function p(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,l.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"textfileview"},"TextFileView"),(0,i.kt)("p",null,"Extends ",(0,i.kt)("inlineCode",{parentName:"p"},"EditableFileView")),(0,i.kt)("p",null,"This class implements a plaintext-based editable file view, which can be loaded and saved given an editor."),(0,i.kt)("p",null,"Note that by default, this view only saves when it's closing. To implement auto-save, your editor should\ncall ",(0,i.kt)("inlineCode",{parentName:"p"},"this.requestSave()")," when the content is changed."),(0,i.kt)("h2",{id:"constructor"},"Constructor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(leaf: WorkspaceLeaf);\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"data"},"data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"data: string\n")),(0,i.kt)("p",null,"In memory data"),(0,i.kt)("h3",{id:"requestsave"},"requestSave"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"requestSave: () => void\n")),(0,i.kt)("p",null,"Debounced save in 2 seconds from now"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"onunloadfile"},"onUnloadFile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"onUnloadFile(file: TFile): Promise<void>;\n")),(0,i.kt)("h3",{id:"onloadfile"},"onLoadFile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"onLoadFile(file: TFile): Promise<void>;\n")),(0,i.kt)("h3",{id:"save"},"save"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"save(clear?: boolean): Promise<void>;\n")),(0,i.kt)("h3",{id:"getviewdata"},"getViewData"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"abstract getViewData(): string;\n")),(0,i.kt)("p",null,"Gets the data from the editor. This will be called to save the editor contents to the file."),(0,i.kt)("h3",{id:"setviewdata"},"setViewData"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"abstract setViewData(data: string, clear: boolean): void;\n")),(0,i.kt)("p",null,"Set the data to the editor. This is used to load the file contents."),(0,i.kt)("p",null,"If clear is set, then it means we're opening a completely different file.\nIn that case, you should call clear(), or implement a slightly more efficient\nclearing mechanism given the new data to be set."),(0,i.kt)("h3",{id:"clear"},"clear"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"abstract clear(): void;\n")),(0,i.kt)("p",null,"Clear the editor. This is usually called when we're about to open a completely\ndifferent file, so it's best to clear any editor states like undo-redo history,\nand any caches/indexes associated with the previous file contents."))}p.isMDXComponent=!0}}]);