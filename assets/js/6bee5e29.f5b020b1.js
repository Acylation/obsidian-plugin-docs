"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[5451],{2893:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=i(7462),o=(i(7294),i(3905));i(1839);const s={sidebar_position:40},a="Communicating with editor extensions",r={unversionedId:"editor/extensions/communicating-with-editor-extensions",id:"editor/extensions/communicating-with-editor-extensions",title:"Communicating with editor extensions",description:"Once you've built your editor extension, you might want to communicate with it from outside the editor. For example, through a Command, or a Ribbon action.",source:"@site/docs/editor/extensions/communicating-with-editor-extensions.md",sourceDirName:"editor/extensions",slug:"/editor/extensions/communicating-with-editor-extensions",permalink:"/obsidian-plugin-docs/editor/extensions/communicating-with-editor-extensions",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/editor/extensions/communicating-with-editor-extensions.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"docs",previous:{title:"Decorations",permalink:"/obsidian-plugin-docs/editor/extensions/decorations"},next:{title:"Markdown post processing",permalink:"/obsidian-plugin-docs/editor/markdown-post-processing"}},d={},c=[{value:"View plugin",id:"view-plugin",level:2},{value:"State field",id:"state-field",level:2}],m={toc:c};function l(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"communicating-with-editor-extensions"},"Communicating with editor extensions"),(0,o.kt)("p",null,"Once you've built your editor extension, you might want to communicate with it from outside the editor. For example, through a ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/user-interface/commands"},"Command"),", or a ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/user-interface/ribbon-actions"},"Ribbon action"),"."),(0,o.kt)("p",null,"You can access the CodeMirror 6 editor from a ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/MarkdownView"},"MarkdownView"),". However, since the Obsidian API doesn't actually expose the editor, you need to tell TypeScript to trust that it's there, using ",(0,o.kt)("inlineCode",{parentName:"p"},"@ts-expect-error"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { EditorView } from "@codemirror/view";\n\n// @ts-expect-error, not typed\nconst editorView = view.editor.cm as EditorView;\n')),(0,o.kt)("h2",{id:"view-plugin"},"View plugin"),(0,o.kt)("p",null,"You can access the ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/editor/extensions/view-plugins"},"view plugin")," instance from the ",(0,o.kt)("inlineCode",{parentName:"p"},"EditorView.plugin()")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts" {8-12}',title:'"main.ts"',"{8-12}":!0},'this.addCommand({\n  id: "example-editor-command",\n  name: "Example editor command",\n  editorCallback: (editor, view) => {\n    // @ts-expect-error, not typed\n    const editorView = view.editor.cm as EditorView;\n\n    const plugin = editorView.plugin(examplePlugin);\n\n    if (plugin) {\n      plugin.addPointerToSelection(editorView);\n    }\n  },\n});\n')),(0,o.kt)("h2",{id:"state-field"},"State field"),(0,o.kt)("p",null,"You can dispatch changes and ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/editor/extensions/state-fields#dispatching-state-effects"},"state effects")," directly on the editor view."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts" {8-12}',title:'"main.ts"',"{8-12}":!0},'this.addCommand({\n  id: "example-editor-command",\n  name: "Example editor command",\n  editorCallback: (editor, view) => {\n    // @ts-expect-error, not typed\n    const editorView = view.editor.cm as EditorView;\n\n    editorView.dispatch({\n      effects: [\n        // ...\n      ]\n    });\n  },\n});\n')))}l.isMDXComponent=!0}}]);