"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[9066],{2842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));n(1839);const s={},i="HTML elements",o={unversionedId:"user-interface/html-elements",id:"user-interface/html-elements",title:"HTML elements",description:"Several components in the Obsidian API, such as the settings tab, expose container elements:",source:"@site/docs/user-interface/html-elements.md",sourceDirName:"user-interface",slug:"/user-interface/html-elements",permalink:"/obsidian-plugin-docs/user-interface/html-elements",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/user-interface/html-elements.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Context menus",permalink:"/obsidian-plugin-docs/user-interface/context-menus"},next:{title:"Icons",permalink:"/obsidian-plugin-docs/user-interface/icons"}},r={},p=[{value:"Create HTML elements using <code>createEl()</code>",id:"create-html-elements-using-createel",level:2},{value:"Style your elements",id:"style-your-elements",level:2},{value:"Conditional styles",id:"conditional-styles",level:3}],m={toc:p};function d(e){let{components:t,...s}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"html-elements"},"HTML elements"),(0,l.kt)("p",null,"Several components in the Obsidian API, such as the ",(0,l.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/user-interface/settings"},"settings tab"),", expose ",(0,l.kt)("em",{parentName:"p"},"container elements"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'import { App, PluginSettingTab } from "obsidian";\n\nclass ExampleSettingTab extends PluginSettingTab {\n  plugin: ExamplePlugin;\n\n  constructor(app: App, plugin: ExamplePlugin) {\n    super(app, plugin);\n    this.plugin = plugin;\n  }\n\n  display(): void {\n    // highlight-next-line\n    let { containerEl } = this;\n\n    // ...\n  }\n}\n')),(0,l.kt)("p",null,"Container elements are ",(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")," objects that make it possible to create custom interfaces within Obsidian."),(0,l.kt)("h2",{id:"create-html-elements-using-createel"},"Create HTML elements using ",(0,l.kt)("inlineCode",{parentName:"h2"},"createEl()")),(0,l.kt)("p",null,"Every ",(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement"),", including the container element, exposes a ",(0,l.kt)("inlineCode",{parentName:"p"},"createEl()")," method that creates an ",(0,l.kt)("inlineCode",{parentName:"p"},"HTMLElement")," under the original element."),(0,l.kt)("p",null,"For example, here's how you can add an ",(0,l.kt)("inlineCode",{parentName:"p"},"<h1>")," heading element inside the container element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'containerEl.createEl("h1", { text: "Heading 1" });\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"createEl()")," returns a reference to the new element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const book = containerEl.createEl("div");\nbook.createEl("div", { text: "How to Take Smart Notes" });\nbook.createEl("small", { text: "S\xf6nke Ahrens" });\n')),(0,l.kt)("h2",{id:"style-your-elements"},"Style your elements"),(0,l.kt)("p",null,"You can add custom CSS styles to your plugin by adding a ",(0,l.kt)("inlineCode",{parentName:"p"},"styles.css")," file in the plugin root directory. To add some styles for the previous book example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="styles.css"',title:'"styles.css"'},".book {\n  border: 1px solid var(--background-modifier-border);\n  padding: 10px;\n}\n\n.book__title {\n  font-weight: 600;\n}\n\n.book__author {\n  color: var(--text-muted);\n}\n")),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("inlineCode",{parentName:"p"},"--background-modifier-border")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"--text-muted")," are ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"},"CSS variables")," that are defined and used by Obsidian itself. If you use these variables for your styles, your plugin will look great even if the user has a different theme! \ud83c\udf08")),(0,l.kt)("p",null,"To make the HTML elements use the styles, set the ",(0,l.kt)("inlineCode",{parentName:"p"},"cls")," property for the HTML element:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const book = containerEl.createEl("div", { cls: "book" });\nbook.createEl("div", { text: "How to Take Smart Notes", cls: "book__title" });\nbook.createEl("small", { text: "S\xf6nke Ahrens", cls: "book__author" });\n')),(0,l.kt)("p",null,"Now it looks much better! \ud83c\udf89"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Styled book item",src:n(3286).Z,width:"864",height:"272"})),(0,l.kt)("h3",{id:"conditional-styles"},"Conditional styles"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"toggleClass")," method if you want to change the style of an element based on the user's settings or other values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'element.toggleClass("danger", status === "error");\n')))}d.isMDXComponent=!0},3286:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/styles-ff62ac028b2089408fab448d00e3b431.png"}}]);