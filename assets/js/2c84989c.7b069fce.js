"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[4008],{5162:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(7294),s=t(6010);const i="tabItem_Ymn6";function r(e){let{children:a,hidden:t,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(i,r),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>c});var n=t(7462),s=t(7294),i=t(6010),r=t(2389),l=t(7392),o=t(7094),u=t(2466);const p="tabList__CuJ",m="tabItem_LNqP";function d(e){var a;const{lazy:t,block:r,defaultValue:d,values:c,groupId:h,className:g}=e,k=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??k.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),N=(0,l.l)(b,((e,a)=>e.value===a.value));if(N.length>0)throw new Error(`Docusaurus error: Duplicate values "${N.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(a=k.find((e=>e.props.default)))?void 0:a.props.value)??k[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:f}=(0,o.U)(),[w,_]=(0,s.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:I}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==w&&b.some((a=>a.value===e))&&_(e)}const C=e=>{const a=e.currentTarget,t=T.indexOf(a),n=b[t].value;n!==w&&(I(a),_(n),null!=h&&f(h,String(n)))},E=e=>{var a;let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}null==(a=t)||a.focus()};return s.createElement("div",{className:(0,i.Z)("tabs-container",p)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},g)},b.map((e=>{let{value:a,label:t,attributes:r}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===a?0:-1,"aria-selected":w===a,key:a,ref:e=>T.push(e),onKeyDown:E,onClick:C},r,{className:(0,i.Z)("tabs__item",m,null==r?void 0:r.className,{"tabs__item--active":w===a})}),t??a)}))),t?(0,s.cloneElement)(k.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},k.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==w})))))}function c(e){const a=(0,r.Z)();return s.createElement(d,(0,n.Z)({key:String(a)},e))}},8289:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var n=t(7462),s=(t(7294),t(3905)),i=t(5488),r=t(5162);t(1839);const l={},o="Release your plugin with GitHub Actions",u={unversionedId:"publishing/release-your-plugin-with-github-actions",id:"publishing/release-your-plugin-with-github-actions",title:"Release your plugin with GitHub Actions",description:"Manually creating your plugin release can be time-consuming and error-prone. In this guide, you'll configure your plugin to use GitHub Actions to automatically create a release when you create a new tag.",source:"@site/docs/publishing/release-your-plugin-with-github-actions.md",sourceDirName:"publishing",slug:"/publishing/release-your-plugin-with-github-actions",permalink:"/obsidian-plugin-docs/publishing/release-your-plugin-with-github-actions",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/publishing/release-your-plugin-with-github-actions.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Submit your plugin",permalink:"/obsidian-plugin-docs/publishing/submit-your-plugin"},next:{title:"Submission guidelines",permalink:"/obsidian-plugin-docs/publishing/submission-guidelines"}},p={},m=[{value:"Use standard-version to automatically tag your release",id:"use-standard-version-to-automatically-tag-your-release",level:2}],d={toc:m};function c(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"release-your-plugin-with-github-actions"},"Release your plugin with GitHub Actions"),(0,s.kt)("p",null,"Manually creating your plugin release can be time-consuming and error-prone. In this guide, you'll configure your plugin to use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," to automatically create a release when you create a new tag."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"The GitHub Action workflow was originally created and shared by ",(0,s.kt)("a",{parentName:"p",href:"https://forum.obsidian.md/u/argentum"},"argentum"),". For more information and other variations, refer to the ",(0,s.kt)("a",{parentName:"p",href:"https://forum.obsidian.md/t/using-github-actions-to-release-plugins/7877/3"},"forum announcement"),".")),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In the root directory of your plugin, create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"release.yml")," under ",(0,s.kt)("inlineCode",{parentName:"p"},".github/workflows")," with the following content:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/release.yml"',title:'".github/workflows/release.yml"'},'name: Release Obsidian plugin\n\non:\n  push:\n    tags:\n      - "*"\n\nenv:\n  PLUGIN_NAME: your-plugin-id # Change this to match the id of your plugin.\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: "14.x"\n\n      - name: Build\n        id: build\n        run: |\n          npm install\n          npm run build\n          mkdir ${{ env.PLUGIN_NAME }}\n          cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}\n          zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}\n          ls\n          echo "::set-output name=tag_name::$(git tag --sort version:refname | tail -n 1)"\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VERSION: ${{ github.ref }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload zip file\n        id: upload-zip\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./${{ env.PLUGIN_NAME }}.zip\n          asset_name: ${{ env.PLUGIN_NAME }}-${{ steps.build.outputs.tag_name }}.zip\n          asset_content_type: application/zip\n\n      - name: Upload main.js\n        id: upload-main\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./main.js\n          asset_name: main.js\n          asset_content_type: text/javascript\n\n      - name: Upload manifest.json\n        id: upload-manifest\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./manifest.json\n          asset_name: manifest.json\n          asset_content_type: application/json\n\n      - name: Upload styles.css\n        id: upload-css\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./styles.css\n          asset_name: styles.css\n          asset_content_type: text/css\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In your terminal, commit the workflow."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'git add .github/workflows/release.yml\ngit commit -m "Add release workflow"\ngit push origin main\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Create a tag that matches the version in the ",(0,s.kt)("inlineCode",{parentName:"p"},"manifest.json")," file."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'git tag -a 1.0.1 -m "1.0.1"\ngit push origin 1.0.1\n')),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-a")," creates an ",(0,s.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging#_creating_tags"},"annotated tag"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"-m")," specifies the name of your release. For Obsidian plugins, this must be the same as the version."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Browse to your repository on GitHub and click the ",(0,s.kt)("strong",{parentName:"p"},"Actions")," tab. Your workflow might still be running, or it might have finished already.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"When the workflow finishes, go back to the main page for your repository and click ",(0,s.kt)("strong",{parentName:"p"},"Releases")," in the side bar on the right-hand side. The workflow has created a GitHub release and uploaded the required assets as binary attachments."))),(0,s.kt)("p",null,"You've set up your plugin to automatically create a GitHub release whenever you create a new tag."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If this is the first release for this plugin, you're now ready to ",(0,s.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/publishing/submit-your-plugin"},"submit your plugin"),"."),(0,s.kt)("li",{parentName:"ul"},"If this is an update to an already published plugin, your users can now update to the latest version.")),(0,s.kt)("h2",{id:"use-standard-version-to-automatically-tag-your-release"},"Use standard-version to automatically tag your release"),(0,s.kt)("p",null,"You can also use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/standard-version"},"standard-version")," to apply the tags automatically based on the commits you made."),(0,s.kt)("p",null,"standard-version uses ",(0,s.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/"},"Conventional Commits")," to add consistency to your commits, and to generate a ",(0,s.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," file automatically from your commits. For example:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If your commit message starts with ",(0,s.kt)("inlineCode",{parentName:"li"},"fix:"),", it bumps the patch version."),(0,s.kt)("li",{parentName:"ul"},"If your commit message starts with ",(0,s.kt)("inlineCode",{parentName:"li"},"feat:"),", it bumps the minor version."),(0,s.kt)("li",{parentName:"ul"},"If the third line of your commit message starts with ",(0,s.kt)("inlineCode",{parentName:"li"},"BREAKING CHANGE:"),", it bumps the major version.")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you're using Visual Studio Code, the ",(0,s.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits"},"Conventional Commits")," extension helps you to create Conventional Commits.")),(0,s.kt)("p",null,"To enable standard-version for your plugin:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Install standard-version."),(0,s.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev standard-version\n"))),(0,s.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev standard-version\n"))))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json"),", add the following properties:"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "release": "standard-version"\n  },\n  "standard-version": {\n    "t": ""\n  }\n}\n')),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},'"t": ""')," configures standard-version to remove the default ",(0,s.kt)("inlineCode",{parentName:"li"},"v")," prefix to adhere to Obsidian's guidelines.")))),(0,s.kt)("p",null,"To make a release:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Commit your changes according to Conventional Commits."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -m "feat: Add settings"\n'))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Create a release and update the changelog."),(0,s.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm run release\n"))),(0,s.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn run release\n")))),(0,s.kt)("admonition",{parentName:"li",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"By default, if the major version is below ",(0,s.kt)("strong",{parentName:"p"},"1"),", for example in 0.3.4, ",(0,s.kt)("inlineCode",{parentName:"p"},"feat:")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"BREAKING CHANGE:")," bump the patch and minor versions, respectively, rather than the minor and major versions. To bump the minor and major version:"),(0,s.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Release as minor\nnpm run release -- --release-as minor\n# Release as major\nnpm run release -- --release-as major\n"))),(0,s.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# Release as minor\nyarn run release -- --release-as minor\n# Release as major\nyarn run release -- --release-as major\n")))))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Push the new tag to GitHub."),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"git push --follow-tags origin main\n")),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"main")," is the name of the remote branch you want to push to.")))),(0,s.kt)("p",null,"GitHub builds and releases the plugin using GitHub Actions."))}c.isMDXComponent=!0}}]);