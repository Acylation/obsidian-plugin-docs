"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[6464],{9013:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>n,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=a(7462),i=(a(7294),a(3905));a(1839);const s={},n="DataAdapter",l={unversionedId:"reference/typescript/interfaces/DataAdapter",id:"reference/typescript/interfaces/DataAdapter",title:"DataAdapter",description:"Methods",source:"@site/docs/reference/typescript/interfaces/DataAdapter.md",sourceDirName:"reference/typescript/interfaces",slug:"/reference/typescript/interfaces/DataAdapter",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/DataAdapter",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/interfaces/DataAdapter.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Constructor",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/Constructor"},next:{title:"DataWriteOptions",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/DataWriteOptions"}},d={},o=[{value:"Methods",id:"methods",level:2},{value:"getName",id:"getname",level:3},{value:"exists",id:"exists",level:3},{value:"stat",id:"stat",level:3},{value:"list",id:"list",level:3},{value:"read",id:"read",level:3},{value:"readBinary",id:"readbinary",level:3},{value:"write",id:"write",level:3},{value:"writeBinary",id:"writebinary",level:3},{value:"append",id:"append",level:3},{value:"process",id:"process",level:3},{value:"getResourcePath",id:"getresourcepath",level:3},{value:"mkdir",id:"mkdir",level:3},{value:"trashSystem",id:"trashsystem",level:3},{value:"trashLocal",id:"trashlocal",level:3},{value:"rmdir",id:"rmdir",level:3},{value:"remove",id:"remove",level:3},{value:"rename",id:"rename",level:3},{value:"copy",id:"copy",level:3}],p={toc:o};function m(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dataadapter"},"DataAdapter"),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"getname"},"getName"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getName: () => string\n")),(0,i.kt)("h3",{id:"exists"},"exists"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"exists: (normalizedPath: string, sensitive?: boolean) => Promise<boolean>\n")),(0,i.kt)("h3",{id:"stat"},"stat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"stat: (normalizedPath: string) => Promise<Stat>\n")),(0,i.kt)("h3",{id:"list"},"list"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"list: (normalizedPath: string) => Promise<ListedFiles>\n")),(0,i.kt)("h3",{id:"read"},"read"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"read: (normalizedPath: string) => Promise<string>\n")),(0,i.kt)("h3",{id:"readbinary"},"readBinary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"readBinary: (normalizedPath: string) => Promise<ArrayBuffer>\n")),(0,i.kt)("h3",{id:"write"},"write"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"write: (normalizedPath: string, data: string, options?: DataWriteOptions) => Promise<void>\n")),(0,i.kt)("h3",{id:"writebinary"},"writeBinary"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"writeBinary: (normalizedPath: string, data: ArrayBuffer, options?: DataWriteOptions) => Promise<void>\n")),(0,i.kt)("h3",{id:"append"},"append"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"append: (normalizedPath: string, data: string, options?: DataWriteOptions) => Promise<void>\n")),(0,i.kt)("h3",{id:"process"},"process"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"process: (normalizedPath: string, fn: (data: string) => string, options?: DataWriteOptions) => Promise<string>\n")),(0,i.kt)("h3",{id:"getresourcepath"},"getResourcePath"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"getResourcePath: (normalizedPath: string) => string\n")),(0,i.kt)("h3",{id:"mkdir"},"mkdir"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"mkdir: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"trashsystem"},"trashSystem"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"trashSystem: (normalizedPath: string) => Promise<boolean>\n")),(0,i.kt)("h3",{id:"trashlocal"},"trashLocal"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"trashLocal: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"rmdir"},"rmdir"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"rmdir: (normalizedPath: string, recursive: boolean) => Promise<void>\n")),(0,i.kt)("h3",{id:"remove"},"remove"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"remove: (normalizedPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"rename"},"rename"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"rename: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")),(0,i.kt)("h3",{id:"copy"},"copy"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"copy: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")))}m.isMDXComponent=!0}}]);