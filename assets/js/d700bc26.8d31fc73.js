"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[1141],{4606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=n(7462),s=(n(7294),n(3905));n(1839);const i={sidebar_position:60},o="Events",r={unversionedId:"events",id:"events",title:"Events",description:"Many of the interfaces in the Obsidian lets you subscribe to events throughout the application, for example when the user makes changes to a file.",source:"@site/docs/events.md",sourceDirName:".",slug:"/events",permalink:"/obsidian-plugin-docs/events",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/events.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60},sidebar:"docs",previous:{title:"Vault",permalink:"/obsidian-plugin-docs/vault"},next:{title:"Develop for mobile devices",permalink:"/obsidian-plugin-docs/testing/mobile-devices"}},l={},d=[{value:"Timing events",id:"timing-events",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"events"},"Events"),(0,s.kt)("p",null,"Many of the interfaces in the Obsidian lets you subscribe to events throughout the application, for example when the user makes changes to a file."),(0,s.kt)("p",null,"Any registered event handlers need to be detached whenever the plugin unloads. The safest way to make sure this happens is to use the ",(0,s.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Component#registerevent"},(0,s.kt)("inlineCode",{parentName:"a"},"registerEvent()"))," method."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},"import { Plugin } from \"obsidian\";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    // highlight-start\n    this.registerEvent(this.app.vault.on('create', () => {\n      console.log('a new file has entered the arena')\n    }));\n    // highlight-end\n  }\n}\n")),(0,s.kt)("h2",{id:"timing-events"},"Timing events"),(0,s.kt)("p",null,"If you want to repeatedly call a function with a fixed delay, use the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/setInterval"},(0,s.kt)("inlineCode",{parentName:"a"},"window.setInterval()"))," function with the ",(0,s.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Component#registerinterval"},(0,s.kt)("inlineCode",{parentName:"a"},"registerInterval()"))," method."),(0,s.kt)("p",null,"The following example displays the current time in the status bar, updated every second:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{11-13}","{11-13}":!0},'import { moment, Plugin } from "obsidian";\n\nexport default class ExamplePlugin extends Plugin {\n  statusBar: HTMLElement;\n\n  async onload() {\n    this.statusBar = this.addStatusBarItem();\n\n    this.updateStatusBar();\n\n    // highlight-start\n    this.registerInterval(\n      window.setInterval(() => this.updateStatusBar(), 1000)\n    );\n    // highlight-end\n  }\n\n  updateStatusBar() {\n    this.statusBar.setText(moment().format("H:mm:ss"));\n  }\n}\n')),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{parentName:"p",href:"https://momentjs.com/"},"Moment")," is a popular JavaScript library for working with dates and time. Obsidian uses Moment internally, so you don't need to install it yourself. You can import it from the Obsidian API instead:"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { moment } from "obsidian";\n'))))}m.isMDXComponent=!0}}]);