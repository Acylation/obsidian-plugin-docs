(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[4669],{7651:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var o=t(83117),s=(t(67294),t(3905)),i=t(93456);const r={},a="Markdown post processing",d={unversionedId:"guides/markdown-post-processing",id:"guides/markdown-post-processing",title:"Markdown post processing",description:"If you want to change how a Markdown document is rendered in Preview mode, you can add your own Markdown post processor. As indicated by the name, the post processor runs after the Markdown has been processed into HTML. It lets you add, remove, or replace HTML elements to the rendered document.",source:"@site/docs/guides/markdown-post-processing.md",sourceDirName:"guides",slug:"/guides/markdown-post-processing",permalink:"/obsidian-plugin-docs/guides/markdown-post-processing",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/guides/markdown-post-processing.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Icons",permalink:"/obsidian-plugin-docs/guides/icons"},next:{title:"React",permalink:"/obsidian-plugin-docs/advanced-guides/react"}},l={},c=[{value:"Post-process Markdown code blocks",id:"post-process-markdown-code-blocks",level:2}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"markdown-post-processing"},"Markdown post processing"),(0,s.kt)("p",null,"If you want to change how a Markdown document is rendered in Preview mode, you can add your own ",(0,s.kt)("em",{parentName:"p"},"Markdown post processor"),". As indicated by the name, the post processor runs ",(0,s.kt)("em",{parentName:"p"},"after")," the Markdown has been processed into HTML. It lets you add, remove, or replace ",(0,s.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/guides/html-elements"},"HTML elements")," to the rendered document."),(0,s.kt)("p",null,"The following example looks for any code block that contains a text between two colons, ",(0,s.kt)("inlineCode",{parentName:"p"},":"),", and replaces it with an appropriate emoji:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},'import { Plugin } from "obsidian";\nimport { Emoji } from "./emoji";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    // highlight-next-line\n    this.registerMarkdownPostProcessor((element, context) => {\n      const codeblocks = element.querySelectorAll("code");\n\n      for (let index = 0; index < codeblocks.length; index++) {\n        const codeblock = codeblocks.item(index);\n        const text = codeblock.innerText.trim();\n        const isEmoji = text[0] === ":" && text[text.length - 1] === ":";\n\n        if (isEmoji) {\n          // highlight-next-line\n          context.addChild(new Emoji(codeblock, text));\n        }\n      }\n    });\n  }\n}\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Emoji")," class extends ",(0,s.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/MarkdownRenderChild"},(0,s.kt)("inlineCode",{parentName:"a"},"MarkdownRenderChild")),", and replaces the code block with a ",(0,s.kt)("inlineCode",{parentName:"p"},"span")," element with the emoji:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="emoji.ts"',title:'"emoji.ts"'},'import { MarkdownRenderChild } from "obsidian";\n\n// highlight-next-line\nexport class Emoji extends MarkdownRenderChild {\n  static ALL_EMOJIS: Record<string, string> = {\n    ":+1:": "\ud83d\udc4d",\n    ":sunglasses:": "\ud83d\ude0e",\n    ":smile:": "\ud83d\ude04",\n  };\n\n  text: string;\n\n  constructor(containerEl: HTMLElement, text: string) {\n    super(containerEl);\n\n    this.text = text;\n  }\n\n  onload() {\n    // highlight-start\n    const emojiEl = this.containerEl.createSpan({\n      text: Emoji.ALL_EMOJIS[this.text] ?? this.text,\n    });\n    this.containerEl.replaceWith(emojiEl);\n    // highlight-end\n  }\n}\n')),(0,s.kt)("h2",{id:"post-process-markdown-code-blocks"},"Post-process Markdown code blocks"),(0,s.kt)("p",null,"Did you know that you can create ",(0,s.kt)("a",{parentName:"p",href:"https://mermaid-js.github.io/"},"Mermaid")," diagrams in Obsidian by creating a ",(0,s.kt)("inlineCode",{parentName:"p"},"mermaid")," code block with a text definition like this one?:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-md"},"```mermaid\nflowchart LR\n    Start --\x3e Stop\n```\n")),(0,s.kt)("p",null,"If you change to Preview mode, the text in the code block becomes the following diagram:"),(0,s.kt)(i.Mermaid,{chart:"flowchart LR\n    Start --\x3e Stop",mdxType:"Mermaid"}),(0,s.kt)("p",null,"If you want to add your own custom code blocks like the Mermaid one, you can use ",(0,s.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/api/classes/Plugin_2#registermarkdowncodeblockprocessor"},(0,s.kt)("inlineCode",{parentName:"a"},"registerMarkdownCodeBlockProcessor")),". The following example renders a code block with CSV data, as a table:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},'import { Plugin } from "obsidian";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    this.registerMarkdownCodeBlockProcessor("csv", (source, el, ctx) => {\n      const rows = source.split("\\n").filter((row) => row.length > 0);\n\n      const table = el.createEl("table");\n      const body = table.createEl("tbody");\n\n      for (let i = 0; i < rows.length; i++) {\n        const cols = rows[i].split(",");\n\n        const row = body.createEl("tr");\n\n        for (let j = 0; j < cols.length; j++) {\n          row.createEl("td", { text: cols[j] });\n        }\n      }\n    });\n  }\n}\n')))}m.isMDXComponent=!0},11748:(e,n,t)=>{var o={"./locale":89234,"./locale.js":89234};function s(e){var n=i(e);return t(n)}function i(e){if(!t.o(o,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return o[e]}s.keys=function(){return Object.keys(o)},s.resolve=i,e.exports=s,s.id=11748}}]);