"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[5575],{6131:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>n,toc:()=>o});var r=a(7462),s=(a(7294),a(3905));a(1839);const l={},i="FileSystemAdapter",n={unversionedId:"reference/typescript/classes/FileSystemAdapter",id:"reference/typescript/classes/FileSystemAdapter",title:"FileSystemAdapter",description:"Implements DataAdapter",source:"@site/docs/reference/typescript/classes/FileSystemAdapter.md",sourceDirName:"reference/typescript/classes",slug:"/reference/typescript/classes/FileSystemAdapter",permalink:"/obsidian-plugin-docs/reference/typescript/classes/FileSystemAdapter",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/classes/FileSystemAdapter.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"FileManager",permalink:"/obsidian-plugin-docs/reference/typescript/classes/FileManager"},next:{title:"FileView",permalink:"/obsidian-plugin-docs/reference/typescript/classes/FileView"}},d={},o=[{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"getName",id:"getname",level:3},{value:"getBasePath",id:"getbasepath",level:3},{value:"mkdir",id:"mkdir",level:3},{value:"trashSystem",id:"trashsystem",level:3},{value:"trashLocal",id:"trashlocal",level:3},{value:"rmdir",id:"rmdir",level:3},{value:"read",id:"read",level:3},{value:"readBinary",id:"readbinary",level:3},{value:"write",id:"write",level:3},{value:"writeBinary",id:"writebinary",level:3},{value:"append",id:"append",level:3},{value:"process",id:"process",level:3},{value:"getResourcePath",id:"getresourcepath",level:3},{value:"getFilePath",id:"getfilepath",level:3},{value:"remove",id:"remove",level:3},{value:"rename",id:"rename",level:3},{value:"copy",id:"copy",level:3},{value:"exists",id:"exists",level:3},{value:"stat",id:"stat",level:3},{value:"list",id:"list",level:3},{value:"getFullPath",id:"getfullpath",level:3},{value:"readLocalFile",id:"readlocalfile",level:3},{value:"mkdir",id:"mkdir-1",level:3}],p={toc:o};function m(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"filesystemadapter"},"FileSystemAdapter"),(0,s.kt)("p",null,"Implements ",(0,s.kt)("inlineCode",{parentName:"p"},"DataAdapter")),(0,s.kt)("h2",{id:"constructor"},"Constructor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"constructor();\n")),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"getname"},"getName"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getName(): string;\n")),(0,s.kt)("h3",{id:"getbasepath"},"getBasePath"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getBasePath(): string;\n")),(0,s.kt)("h3",{id:"mkdir"},"mkdir"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"mkdir(normalizedPath: string): Promise<void>;\n")),(0,s.kt)("h3",{id:"trashsystem"},"trashSystem"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"trashSystem(normalizedPath: string): Promise<boolean>;\n")),(0,s.kt)("h3",{id:"trashlocal"},"trashLocal"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"trashLocal(normalizedPath: string): Promise<void>;\n")),(0,s.kt)("h3",{id:"rmdir"},"rmdir"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"rmdir(normalizedPath: string, recursive: boolean): Promise<void>;\n")),(0,s.kt)("h3",{id:"read"},"read"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"read(normalizedPath: string): Promise<string>;\n")),(0,s.kt)("h3",{id:"readbinary"},"readBinary"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"readBinary(normalizedPath: string): Promise<ArrayBuffer>;\n")),(0,s.kt)("h3",{id:"write"},"write"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"write(normalizedPath: string, data: string, options?: DataWriteOptions): Promise<void>;\n")),(0,s.kt)("h3",{id:"writebinary"},"writeBinary"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"writeBinary(normalizedPath: string, data: ArrayBuffer, options?: DataWriteOptions): Promise<void>;\n")),(0,s.kt)("h3",{id:"append"},"append"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"append(normalizedPath: string, data: string, options?: DataWriteOptions): Promise<void>;\n")),(0,s.kt)("h3",{id:"process"},"process"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"process(normalizedPath: string, fn: (data: string) => string, options?: DataWriteOptions): Promise<string>;\n")),(0,s.kt)("h3",{id:"getresourcepath"},"getResourcePath"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getResourcePath(normalizedPath: string): string;\n")),(0,s.kt)("h3",{id:"getfilepath"},"getFilePath"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getFilePath(normalizedPath: string): string;\n")),(0,s.kt)("p",null,"Returns the file:// path of this file"),(0,s.kt)("h3",{id:"remove"},"remove"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"remove(normalizedPath: string): Promise<void>;\n")),(0,s.kt)("h3",{id:"rename"},"rename"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"rename(normalizedPath: string, normalizedNewPath: string): Promise<void>;\n")),(0,s.kt)("h3",{id:"copy"},"copy"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"copy(normalizedPath: string, normalizedNewPath: string): Promise<void>;\n")),(0,s.kt)("h3",{id:"exists"},"exists"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"exists(normalizedPath: string, sensitive?: boolean): Promise<boolean>;\n")),(0,s.kt)("h3",{id:"stat"},"stat"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"stat(normalizedPath: string): Promise<Stat | null>;\n")),(0,s.kt)("h3",{id:"list"},"list"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"list(normalizedPath: string): Promise<ListedFiles>;\n")),(0,s.kt)("h3",{id:"getfullpath"},"getFullPath"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getFullPath(normalizedPath: string): string;\n")),(0,s.kt)("h3",{id:"readlocalfile"},"readLocalFile"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"static readLocalFile(path: string): Promise<ArrayBuffer>;\n")),(0,s.kt)("h3",{id:"mkdir-1"},"mkdir"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"static mkdir(path: string): Promise<void>;\n")))}m.isMDXComponent=!0}}]);