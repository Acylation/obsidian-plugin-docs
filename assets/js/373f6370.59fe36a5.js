"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[9776],{2982:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var n=a(7462),s=(a(7294),a(3905));a(1839);const l={},r="WorkspaceLeaf",i={unversionedId:"reference/typescript/classes/WorkspaceLeaf",id:"reference/typescript/classes/WorkspaceLeaf",title:"WorkspaceLeaf",description:"Extends WorkspaceItem",source:"@site/docs/reference/typescript/classes/WorkspaceLeaf.md",sourceDirName:"reference/typescript/classes",slug:"/reference/typescript/classes/WorkspaceLeaf",permalink:"/obsidian-plugin-docs/reference/typescript/classes/WorkspaceLeaf",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/classes/WorkspaceLeaf.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"WorkspaceItem",permalink:"/obsidian-plugin-docs/reference/typescript/classes/WorkspaceItem"},next:{title:"WorkspaceMobileDrawer",permalink:"/obsidian-plugin-docs/reference/typescript/classes/WorkspaceMobileDrawer"}},p={},o=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:2},{value:"view",id:"view",level:3},{value:"Methods",id:"methods",level:2},{value:"openFile",id:"openfile",level:3},{value:"open",id:"open",level:3},{value:"getViewState",id:"getviewstate",level:3},{value:"setViewState",id:"setviewstate",level:3},{value:"getEphemeralState",id:"getephemeralstate",level:3},{value:"setEphemeralState",id:"setephemeralstate",level:3},{value:"togglePinned",id:"togglepinned",level:3},{value:"setPinned",id:"setpinned",level:3},{value:"setGroupMember",id:"setgroupmember",level:3},{value:"setGroup",id:"setgroup",level:3},{value:"detach",id:"detach",level:3},{value:"getIcon",id:"geticon",level:3},{value:"getDisplayText",id:"getdisplaytext",level:3},{value:"onResize",id:"onresize",level:3},{value:"on",id:"on",level:3},{value:"on",id:"on-1",level:3}],c={toc:o};function d(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"workspaceleaf"},"WorkspaceLeaf"),(0,s.kt)("p",null,"Extends ",(0,s.kt)("inlineCode",{parentName:"p"},"WorkspaceItem")),(0,s.kt)("h2",{id:"constructor"},"Constructor"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"constructor();\n")),(0,s.kt)("h2",{id:"properties"},"Properties"),(0,s.kt)("h3",{id:"view"},"view"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"view: View\n")),(0,s.kt)("h2",{id:"methods"},"Methods"),(0,s.kt)("h3",{id:"openfile"},"openFile"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"openFile(file: TFile, openState?: OpenViewState): Promise<void>;\n")),(0,s.kt)("p",null,"By default, ",(0,s.kt)("inlineCode",{parentName:"p"},"openFile")," will also make the leaf active.\nPass in ",(0,s.kt)("inlineCode",{parentName:"p"},"{ active: false }")," to override."),(0,s.kt)("h3",{id:"open"},"open"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"open(view: View): Promise<View>;\n")),(0,s.kt)("h3",{id:"getviewstate"},"getViewState"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getViewState(): ViewState;\n")),(0,s.kt)("h3",{id:"setviewstate"},"setViewState"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"setViewState(viewState: ViewState, eState?: any): Promise<void>;\n")),(0,s.kt)("h3",{id:"getephemeralstate"},"getEphemeralState"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getEphemeralState(): any;\n")),(0,s.kt)("h3",{id:"setephemeralstate"},"setEphemeralState"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"setEphemeralState(state: any): void;\n")),(0,s.kt)("h3",{id:"togglepinned"},"togglePinned"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"togglePinned(): void;\n")),(0,s.kt)("h3",{id:"setpinned"},"setPinned"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"setPinned(pinned: boolean): void;\n")),(0,s.kt)("h3",{id:"setgroupmember"},"setGroupMember"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"setGroupMember(other: WorkspaceLeaf): void;\n")),(0,s.kt)("h3",{id:"setgroup"},"setGroup"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"setGroup(group: string): void;\n")),(0,s.kt)("h3",{id:"detach"},"detach"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"detach(): void;\n")),(0,s.kt)("h3",{id:"geticon"},"getIcon"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getIcon(): IconName;\n")),(0,s.kt)("h3",{id:"getdisplaytext"},"getDisplayText"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"getDisplayText(): string;\n")),(0,s.kt)("h3",{id:"onresize"},"onResize"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"onResize(): void;\n")),(0,s.kt)("h3",{id:"on"},"on"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"on(name: 'pinned-change', callback: (pinned: boolean) => any, ctx?: any): EventRef;\n")),(0,s.kt)("h3",{id:"on-1"},"on"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"on(name: 'group-change', callback: (group: string) => any, ctx?: any): EventRef;\n")))}d.isMDXComponent=!0}}]);