"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[8631],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||l;return n?a.createElement(f,i(i({ref:t},d),{},{components:n})):a.createElement(f,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const l={},i="TextFileView",o={unversionedId:"reference/typescript/classes/TextFileView",id:"reference/typescript/classes/TextFileView",title:"TextFileView",description:"Extends EditableFileView",source:"@site/docs/reference/typescript/classes/TextFileView.md",sourceDirName:"reference/typescript/classes",slug:"/reference/typescript/classes/TextFileView",permalink:"/obsidian-plugin-docs/reference/typescript/classes/TextFileView",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/classes/TextFileView.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"TextComponent",permalink:"/obsidian-plugin-docs/reference/typescript/classes/TextComponent"},next:{title:"ToggleComponent",permalink:"/obsidian-plugin-docs/reference/typescript/classes/ToggleComponent"}},s={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Properties",id:"properties",level:2},{value:"data",id:"data",level:3},{value:"requestSave",id:"requestsave",level:3},{value:"Methods",id:"methods",level:2},{value:"onUnloadFile",id:"onunloadfile",level:3},{value:"onLoadFile",id:"onloadfile",level:3},{value:"save",id:"save",level:3},{value:"getViewData",id:"getviewdata",level:3},{value:"setViewData",id:"setviewdata",level:3},{value:"clear",id:"clear",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"textfileview"},"TextFileView"),(0,r.kt)("p",null,"Extends ",(0,r.kt)("inlineCode",{parentName:"p"},"EditableFileView")),(0,r.kt)("p",null,"This class implements a plaintext-based editable file view, which can be loaded and saved given an editor."),(0,r.kt)("p",null,"Note that by default, this view only saves when it's closing. To implement auto-save, your editor should\ncall ",(0,r.kt)("inlineCode",{parentName:"p"},"this.requestSave()")," when the content is changed."),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"constructor(leaf: WorkspaceLeaf);\n")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"data"},"data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"data: string\n")),(0,r.kt)("p",null,"In memory data"),(0,r.kt)("h3",{id:"requestsave"},"requestSave"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"requestSave: () => void\n")),(0,r.kt)("p",null,"Debounced save in 2 seconds from now"),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"onunloadfile"},"onUnloadFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onUnloadFile(file: TFile): Promise<void>;\n")),(0,r.kt)("h3",{id:"onloadfile"},"onLoadFile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onLoadFile(file: TFile): Promise<void>;\n")),(0,r.kt)("h3",{id:"save"},"save"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"save(clear?: boolean): Promise<void>;\n")),(0,r.kt)("h3",{id:"getviewdata"},"getViewData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract getViewData(): string;\n")),(0,r.kt)("p",null,"Gets the data from the editor. This will be called to save the editor contents to the file."),(0,r.kt)("h3",{id:"setviewdata"},"setViewData"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract setViewData(data: string, clear: boolean): void;\n")),(0,r.kt)("p",null,"Set the data to the editor. This is used to load the file contents."),(0,r.kt)("p",null,"If clear is set, then it means we're opening a completely different file.\nIn that case, you should call clear(), or implement a slightly more efficient\nclearing mechanism given the new data to be set."),(0,r.kt)("h3",{id:"clear"},"clear"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"abstract clear(): void;\n")),(0,r.kt)("p",null,"Clear the editor. This is usually called when we're about to open a completely\ndifferent file, so it's best to clear any editor states like undo-redo history,\nand any caches/indexes associated with the previous file contents."))}p.isMDXComponent=!0}}]);