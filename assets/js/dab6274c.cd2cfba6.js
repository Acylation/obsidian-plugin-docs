"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[2012],{9440:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=o(7462),n=(o(7294),o(3905));o(1839);const s={},i="MarkdownPostProcessorContext",a={unversionedId:"reference/typescript/interfaces/MarkdownPostProcessorContext",id:"reference/typescript/interfaces/MarkdownPostProcessorContext",title:"MarkdownPostProcessorContext",description:"Properties",source:"@site/docs/reference/typescript/interfaces/MarkdownPostProcessorContext.md",sourceDirName:"reference/typescript/interfaces",slug:"/reference/typescript/interfaces/MarkdownPostProcessorContext",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/MarkdownPostProcessorContext",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/interfaces/MarkdownPostProcessorContext.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"MarkdownPostProcessor",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/MarkdownPostProcessor"},next:{title:"MarkdownPreviewEvents",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/MarkdownPreviewEvents"}},d={},c=[{value:"Properties",id:"properties",level:2},{value:"docId",id:"docid",level:3},{value:"sourcePath",id:"sourcepath",level:3},{value:"frontmatter",id:"frontmatter",level:3},{value:"Methods",id:"methods",level:2},{value:"addChild",id:"addchild",level:3},{value:"getSectionInfo",id:"getsectioninfo",level:3}],l={toc:c};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"markdownpostprocessorcontext"},"MarkdownPostProcessorContext"),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"docid"},"docId"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"docId: string\n")),(0,n.kt)("h3",{id:"sourcepath"},"sourcePath"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"sourcePath: string\n")),(0,n.kt)("h3",{id:"frontmatter"},"frontmatter"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"frontmatter: any\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"addchild"},"addChild"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"addChild: (child: MarkdownRenderChild) => void\n")),(0,n.kt)("p",null,"Adds a child component that will have its lifecycle managed by the renderer."),(0,n.kt)("p",null,"Use this to add a dependent child to the renderer such that if the containerEl\nof the child is ever removed, the component's unload will be called."),(0,n.kt)("h3",{id:"getsectioninfo"},"getSectionInfo"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getSectionInfo: (el: HTMLElement) => MarkdownSectionInformation\n")),(0,n.kt)("p",null,"Gets the section information of this element at this point in time.\nOnly call this function right before you need this information to get the most up-to-date version.\nThis function may also return null in many circumstances; if you use it, you must be prepared to deal with nulls."))}p.isMDXComponent=!0}}]);