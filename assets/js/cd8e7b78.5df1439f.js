"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[6083],{431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));n(1839);const a={},s="HTMLElement",l={unversionedId:"reference/typescript/interfaces/HTMLElement",id:"reference/typescript/interfaces/HTMLElement",title:"HTMLElement",description:"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",source:"@site/docs/reference/typescript/interfaces/HTMLElement.md",sourceDirName:"reference/typescript/interfaces",slug:"/reference/typescript/interfaces/HTMLElement",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/HTMLElement",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/interfaces/HTMLElement.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"HSL",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/HSL"},next:{title:"HeadingCache",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/HeadingCache"}},o={},c=[{value:"Properties",id:"properties",level:2},{value:"_EVENTS",id:"_events",level:3},{value:"Methods",id:"methods",level:2},{value:"on",id:"on",level:3},{value:"off",id:"off",level:3},{value:"onClickEvent",id:"onclickevent",level:3},{value:"onNodeInserted",id:"onnodeinserted",level:3},{value:"onWindowMigrated",id:"onwindowmigrated",level:3},{value:"trigger",id:"trigger",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"htmlelement"},"HTMLElement"),(0,r.kt)("p",null,"Any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"_events"},"_EVENTS"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"_EVENTS: { fullscreenchange?: EventListenerInfo[]; fullscreenerror?: EventListenerInfo[]; abort?: EventListenerInfo[]; animationcancel?: EventListenerInfo[]; ... 87 more ...; paste?: EventListenerInfo[]; }\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"on"},"on"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'on: <K extends "input" | "progress" | "select" | "fullscreenchange" | "fullscreenerror" | "abort" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | ... 80 more ... | "paste">(this: HTMLElement, type: K, selector: string, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]...\n')),(0,r.kt)("h3",{id:"off"},"off"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'off: <K extends "input" | "progress" | "select" | "fullscreenchange" | "fullscreenerror" | "abort" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | ... 80 more ... | "paste">(this: HTMLElement, type: K, selector: string, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]...\n')),(0,r.kt)("h3",{id:"onclickevent"},"onClickEvent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onClickEvent: (this: HTMLElement, listener: (this: HTMLElement, ev: MouseEvent) => any, options?: boolean | AddEventListenerOptions) => void\n")),(0,r.kt)("h3",{id:"onnodeinserted"},"onNodeInserted"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onNodeInserted: (this: HTMLElement, listener: () => any, once?: boolean) => () => void\n")),(0,r.kt)("h3",{id:"onwindowmigrated"},"onWindowMigrated"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"onWindowMigrated: (this: HTMLElement, listener: (win: Window) => any) => () => void\n")),(0,r.kt)("h3",{id:"trigger"},"trigger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"trigger: (eventType: string) => void\n")))}p.isMDXComponent=!0}}]);