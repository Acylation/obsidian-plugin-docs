"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[4008],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(a),d=r,g=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(g,s(s({ref:t},p),{},{components:a})):n.createElement(g,s({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var u=2;u<i;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),r=a(34334);const i="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(83117),r=a(67294),i=a(34334),s=a(72389),o=a(67392),l=a(7094),u=a(12466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){var t,a;const{lazy:s,block:c,defaultValue:d,values:g,groupId:h,className:b}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:y.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,o.l)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===d?d:null!=(t=null!=d?d:null==(a=y.find((e=>e.props.default)))?void 0:a.props.value)?t:y[0].props.value;if(null!==N&&!k.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[T,_]=(0,r.useState)(N),I=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=h){const e=v[h];null!=e&&e!==T&&k.some((t=>t.value===e))&&_(e)}const O=e=>{const t=e.currentTarget,a=I.indexOf(t),n=k[a].value;n!==T&&(E(t),_(n),null!=h&&w(h,String(n)))},C=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{var n;const t=I.indexOf(e.currentTarget)+1;a=null!=(n=I[t])?n:I[0];break}case"ArrowLeft":{var r;const t=I.indexOf(e.currentTarget)-1;a=null!=(r=I[t])?r:I[I.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":c},b)},k.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>I.push(e),onKeyDown:C,onFocus:O,onClick:O},s,{className:(0,i.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":T===t})}),null!=a?a:t)}))),s?(0,r.cloneElement)(y.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,s.Z)();return r.createElement(c,(0,n.Z)({key:String(t)},e))}},38289:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var n=a(83117),r=(a(67294),a(3905)),i=a(65488),s=a(85162);const o={},l="Release your plugin with GitHub Actions",u={unversionedId:"publishing/release-your-plugin-with-github-actions",id:"publishing/release-your-plugin-with-github-actions",title:"Release your plugin with GitHub Actions",description:"Manually creating your plugin release can be time-consuming and error-prone. In this guide, you'll configure your plugin to use GitHub Actions to automatically create a release when you create a new tag.",source:"@site/docs/publishing/release-your-plugin-with-github-actions.md",sourceDirName:"publishing",slug:"/publishing/release-your-plugin-with-github-actions",permalink:"/obsidian-plugin-docs/publishing/release-your-plugin-with-github-actions",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/publishing/release-your-plugin-with-github-actions.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Submit your plugin",permalink:"/obsidian-plugin-docs/publishing/submit-your-plugin"},next:{title:"Submission guidelines",permalink:"/obsidian-plugin-docs/publishing/submission-guidelines"}},p={},m=[{value:"Use standard-version to automatically tag your release",id:"use-standard-version-to-automatically-tag-your-release",level:2}],c={toc:m};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"release-your-plugin-with-github-actions"},"Release your plugin with GitHub Actions"),(0,r.kt)("p",null,"Manually creating your plugin release can be time-consuming and error-prone. In this guide, you'll configure your plugin to use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," to automatically create a release when you create a new tag."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The GitHub Action workflow was originally created and shared by ",(0,r.kt)("a",{parentName:"p",href:"https://forum.obsidian.md/u/argentum"},"argentum"),". For more information and other variations, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://forum.obsidian.md/t/using-github-actions-to-release-plugins/7877/3"},"forum announcement"),".")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the root directory of your plugin, create a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"release.yml")," under ",(0,r.kt)("inlineCode",{parentName:"p"},".github/workflows")," with the following content:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title=".github/workflows/release.yml"',title:'".github/workflows/release.yml"'},'name: Release Obsidian plugin\n\non:\n  push:\n    tags:\n      - "*"\n\nenv:\n  PLUGIN_NAME: your-plugin-id # Change this to match the id of your plugin.\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: Use Node.js\n        uses: actions/setup-node@v1\n        with:\n          node-version: "14.x"\n\n      - name: Build\n        id: build\n        run: |\n          npm install\n          npm run build\n          mkdir ${{ env.PLUGIN_NAME }}\n          cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}\n          zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}\n          ls\n          echo "::set-output name=tag_name::$(git tag --sort version:refname | tail -n 1)"\n\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          VERSION: ${{ github.ref }}\n        with:\n          tag_name: ${{ github.ref }}\n          release_name: ${{ github.ref }}\n          draft: false\n          prerelease: false\n\n      - name: Upload zip file\n        id: upload-zip\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./${{ env.PLUGIN_NAME }}.zip\n          asset_name: ${{ env.PLUGIN_NAME }}-${{ steps.build.outputs.tag_name }}.zip\n          asset_content_type: application/zip\n\n      - name: Upload main.js\n        id: upload-main\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./main.js\n          asset_name: main.js\n          asset_content_type: text/javascript\n\n      - name: Upload manifest.json\n        id: upload-manifest\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./manifest.json\n          asset_name: manifest.json\n          asset_content_type: application/json\n\n      - name: Upload styles.css\n        id: upload-css\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./styles.css\n          asset_name: styles.css\n          asset_content_type: text/css\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In your terminal, commit the workflow."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git add .github/workflows/release.yml\ngit commit -m "Add release workflow"\ngit push origin main\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a tag that matches the version in the ",(0,r.kt)("inlineCode",{parentName:"p"},"manifest.json")," file."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git tag -a 1.0.1 -m "1.0.1"\ngit push origin 1.0.1\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-a")," creates an ",(0,r.kt)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging#_creating_tags"},"annotated tag"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-m")," specifies the name of your release. For Obsidian plugins, this must be the same as the version."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Browse to your repository on GitHub and click the ",(0,r.kt)("strong",{parentName:"p"},"Actions")," tab. Your workflow might still be running, or it might have finished already.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When the workflow finishes, go back to the main page for your repository and click ",(0,r.kt)("strong",{parentName:"p"},"Releases")," in the side bar on the right-hand side. The workflow has created a GitHub release and uploaded the required assets as binary attachments."))),(0,r.kt)("p",null,"You've set up your plugin to automatically create a GitHub release whenever you create a new tag."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If this is the first release for this plugin, you're now ready to ",(0,r.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/publishing/submit-your-plugin"},"submit your plugin"),"."),(0,r.kt)("li",{parentName:"ul"},"If this is an update to an already published plugin, your users can now update to the latest version.")),(0,r.kt)("h2",{id:"use-standard-version-to-automatically-tag-your-release"},"Use standard-version to automatically tag your release"),(0,r.kt)("p",null,"You can also use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/conventional-changelog/standard-version"},"standard-version")," to apply the tags automatically based on the commits you made."),(0,r.kt)("p",null,"standard-version uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/"},"Conventional Commits")," to add consistency to your commits, and to generate a ",(0,r.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," file automatically from your commits. For example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If your commit message starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"fix:"),", it bumps the patch version."),(0,r.kt)("li",{parentName:"ul"},"If your commit message starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"feat:"),", it bumps the minor version."),(0,r.kt)("li",{parentName:"ul"},"If the third line of your commit message starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"BREAKING CHANGE:"),", it bumps the major version.")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you're using Visual Studio Code, the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits"},"Conventional Commits")," extension helps you to create Conventional Commits.")),(0,r.kt)("p",null,"To enable standard-version for your plugin:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install standard-version."),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev standard-version\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev standard-version\n"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", add the following properties:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "release": "standard-version"\n  },\n  "standard-version": {\n    "t": ""\n  }\n}\n')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"t": ""')," configures standard-version to remove the default ",(0,r.kt)("inlineCode",{parentName:"li"},"v")," prefix to adhere to Obsidian's guidelines.")))),(0,r.kt)("p",null,"To make a release:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Commit your changes according to Conventional Commits."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -m "feat: Add settings"\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a release and update the changelog."),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run release\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn run release\n")))),(0,r.kt)("admonition",{parentName:"li",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"By default, if the major version is below ",(0,r.kt)("strong",{parentName:"p"},"1"),", for example in 0.3.4, ",(0,r.kt)("inlineCode",{parentName:"p"},"feat:")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BREAKING CHANGE:")," bump the patch and minor versions, respectively, rather than the minor and major versions. To bump the minor and major version:"),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Release as minor\nnpm run release -- --release-as minor\n# Release as major\nnpm run release -- --release-as major\n"))),(0,r.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Release as minor\nyarn run release -- --release-as minor\n# Release as major\nyarn run release -- --release-as major\n")))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Push the new tag to GitHub."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push --follow-tags origin main\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"main")," is the name of the remote branch you want to push to.")))),(0,r.kt)("p",null,"GitHub builds and releases the plugin using GitHub Actions."))}d.isMDXComponent=!0}}]);