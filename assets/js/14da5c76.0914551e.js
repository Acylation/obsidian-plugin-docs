"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[2354],{6073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));n(1839);const s={},l="Modals",i={unversionedId:"user-interface/modals",id:"user-interface/modals",title:"Modals",description:"Modals display information and accept input from the user. To create a modal, create a class that extends Modal:",source:"@site/docs/user-interface/modals.md",sourceDirName:"user-interface",slug:"/user-interface/modals",permalink:"/obsidian-plugin-docs/user-interface/modals",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/user-interface/modals.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Icons",permalink:"/obsidian-plugin-docs/user-interface/icons"},next:{title:"Ribbon actions",permalink:"/obsidian-plugin-docs/user-interface/ribbon-actions"}},r={},d=[{value:"Accept user input",id:"accept-user-input",level:2},{value:"Select from list of suggestions",id:"select-from-list-of-suggestions",level:2}],p={toc:d};function c(e){let{components:t,...s}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"modals"},"Modals"),(0,o.kt)("p",null,"Modals display information and accept input from the user. To create a modal, create a class that extends ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Modal"},(0,o.kt)("inlineCode",{parentName:"a"},"Modal")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modal.ts"',title:'"modal.ts"'},'import { App, Modal } from "obsidian";\n\nexport class ExampleModal extends Modal {\n  constructor(app: App) {\n    super(app);\n  }\n\n  onOpen() {\n    let { contentEl } = this;\n    contentEl.setText("Look at me, I\'m a modal! \ud83d\udc40");\n  }\n\n  onClose() {\n    let { contentEl } = this;\n    contentEl.empty();\n  }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/reference/typescript/classes/Modal#onopen"},(0,o.kt)("inlineCode",{parentName:"a"},"onOpen()"))," is called when the modal is opened and is responsible for building the content of your modal. For more information, refer to ",(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/user-interface/html-elements"},"HTML elements"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/obsidian-plugin-docs/reference/typescript/classes/Modal#onclose"},(0,o.kt)("inlineCode",{parentName:"a"},"onClose()"))," is called when the modal is closed and is responsible for cleaning up any resources used by the modal.")),(0,o.kt)("p",null,"To open a modal, create a new instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleModal")," and call ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Modal#open"},(0,o.kt)("inlineCode",{parentName:"a"},"open()"))," on it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},'import { Plugin } from "obsidian";\nimport { ExampleModal } from "./modal";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    this.addCommand({\n      id: "display-modal",\n      name: "Display modal",\n      callback: () => {\n        new ExampleModal(this.app).open();\n      },\n    });\n  }\n}\n')),(0,o.kt)("h2",{id:"accept-user-input"},"Accept user input"),(0,o.kt)("p",null,"The modal in the previous example only displayed some text. Let's look at a little more complex example that handles input from the user."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Modal with user input",src:n(5139).Z,width:"1826",height:"834"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modal.ts"',title:'"modal.ts"'},'import { App, Modal, Setting } from "obsidian";\n\nexport class ExampleModal extends Modal {\n  result: string;\n  onSubmit: (result: string) => void;\n\n  constructor(app: App, onSubmit: (result: string) => void) {\n    super(app);\n    this.onSubmit = onSubmit;\n  }\n\n  onOpen() {\n    const { contentEl } = this;\n\n    contentEl.createEl("h1", { text: "What\'s your name?" });\n\n    new Setting(contentEl)\n      .setName("Name")\n      .addText((text) =>\n        text.onChange((value) => {\n          // highlight-next-line\n          this.result = value\n        }));\n\n    new Setting(contentEl)\n      .addButton((btn) =>\n        btn\n          .setButtonText("Submit")\n          .setCta()\n          .onClick(() => {\n            // highlight-start\n            this.close();\n            this.onSubmit(this.result);\n            // highlight-end\n          }));\n  }\n\n  onClose() {\n    let { contentEl } = this;\n    contentEl.empty();\n  }\n}\n')),(0,o.kt)("p",null,"The result is stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"this.result")," and returned in the ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmit")," callback when the user clicks ",(0,o.kt)("strong",{parentName:"p"},"Submit"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"new ExampleModal(this.app, (result) => {\n  new Notice(`Hello, ${result}!`);\n}).open();\n")),(0,o.kt)("h2",{id:"select-from-list-of-suggestions"},"Select from list of suggestions"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/SuggestModal"},(0,o.kt)("inlineCode",{parentName:"a"},"SuggestModal"))," is a special modal that lets you display a list of suggestions to the user."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Modal with suggestions",src:n(7269).Z,width:"800",height:"392"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modal.ts"',title:'"modal.ts"'},'import { App, Notice, SuggestModal } from "obsidian";\n\ninterface Book {\n  title: string;\n  author: string;\n}\n\nconst ALL_BOOKS = [\n  {\n    title: "How to Take Smart Notes",\n    author: "S\xf6nke Ahrens",\n  },\n  {\n    title: "Thinking, Fast and Slow",\n    author: "Daniel Kahneman",\n  },\n  {\n    title: "Deep Work",\n    author: "Cal Newport",\n  },\n];\n\nexport class ExampleModal extends SuggestModal<Book> {\n  // Returns all available suggestions.\n  getSuggestions(query: string): Book[] {\n    return ALL_BOOKS.filter((book) =>\n      book.title.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n\n  // Renders each suggestion item.\n  renderSuggestion(book: Book, el: HTMLElement) {\n    el.createEl("div", { text: book.title });\n    el.createEl("small", { text: book.author });\n  }\n\n  // Perform action on the selected suggestion.\n  onChooseSuggestion(book: Book, evt: MouseEvent | KeyboardEvent) {\n    new Notice(`Selected ${book.title}`);\n  }\n}\n')),(0,o.kt)("p",null,"In addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"SuggestModal"),", the Obsidian API provides an even more specialized type of modal for suggestions: the ",(0,o.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/FuzzySuggestModal"},(0,o.kt)("inlineCode",{parentName:"a"},"FuzzySuggestModal")),". While it doesn't give you the same control of how each item is rendered, you get ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Approximate_string_matching"},"fuzzy string search")," out-of-the-box."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Fuzzy string search",src:n(3847).Z,width:"1832",height:"426"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export class ExampleModal extends FuzzySuggestModal<Book> {\n  getItems(): Book[] {\n    return ALL_BOOKS;\n  }\n\n  getItemText(book: Book): string {\n    return book.title;\n  }\n\n  onChooseItem(book: Book, evt: MouseEvent | KeyboardEvent) {\n    new Notice(`Selected ${book.title}`);\n  }\n}\n")))}c.isMDXComponent=!0},3847:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/fuzzy-suggestion-modal-02cbd0b4bcaf66fa54c5202a2174424b.png"},5139:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/modal-input-806047f5d69c7859f836155a88f41a56.png"},7269:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/suggest-modal-be2190dc1f6a84a69c0788a3fad93d57.gif"}}]);