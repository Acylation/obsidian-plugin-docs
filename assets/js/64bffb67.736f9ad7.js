"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[6464],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>u});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),d=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(r),u=n,g=m["".concat(o,".").concat(u)]||m[u]||c[u]||i;return r?a.createElement(g,s(s({ref:t},p),{},{components:r})):a.createElement(g,s({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,s[1]=l;for(var d=2;d<i;d++)s[d]=r[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},59013:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=r(83117),n=(r(67294),r(3905));const i={},s="DataAdapter",l={unversionedId:"reference/typescript/interfaces/DataAdapter",id:"reference/typescript/interfaces/DataAdapter",title:"DataAdapter",description:"Methods",source:"@site/docs/reference/typescript/interfaces/DataAdapter.md",sourceDirName:"reference/typescript/interfaces",slug:"/reference/typescript/interfaces/DataAdapter",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/DataAdapter",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/interfaces/DataAdapter.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Constructor",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/Constructor"},next:{title:"DataWriteOptions",permalink:"/obsidian-plugin-docs/reference/typescript/interfaces/DataWriteOptions"}},o={},d=[{value:"Methods",id:"methods",level:2},{value:"getName",id:"getname",level:3},{value:"exists",id:"exists",level:3},{value:"stat",id:"stat",level:3},{value:"list",id:"list",level:3},{value:"read",id:"read",level:3},{value:"readBinary",id:"readbinary",level:3},{value:"write",id:"write",level:3},{value:"writeBinary",id:"writebinary",level:3},{value:"append",id:"append",level:3},{value:"getResourcePath",id:"getresourcepath",level:3},{value:"mkdir",id:"mkdir",level:3},{value:"trashSystem",id:"trashsystem",level:3},{value:"trashLocal",id:"trashlocal",level:3},{value:"rmdir",id:"rmdir",level:3},{value:"remove",id:"remove",level:3},{value:"rename",id:"rename",level:3},{value:"copy",id:"copy",level:3}],p={toc:d};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dataadapter"},"DataAdapter"),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"getname"},"getName"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getName: () => string\n")),(0,n.kt)("h3",{id:"exists"},"exists"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"exists: (normalizedPath: string, sensitive?: boolean) => Promise<boolean>\n")),(0,n.kt)("h3",{id:"stat"},"stat"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"stat: (normalizedPath: string) => Promise<Stat>\n")),(0,n.kt)("h3",{id:"list"},"list"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"list: (normalizedPath: string) => Promise<ListedFiles>\n")),(0,n.kt)("h3",{id:"read"},"read"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"read: (normalizedPath: string) => Promise<string>\n")),(0,n.kt)("h3",{id:"readbinary"},"readBinary"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"readBinary: (normalizedPath: string) => Promise<ArrayBuffer>\n")),(0,n.kt)("h3",{id:"write"},"write"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"write: (normalizedPath: string, data: string, options?: DataWriteOptions) => Promise<void>\n")),(0,n.kt)("h3",{id:"writebinary"},"writeBinary"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"writeBinary: (normalizedPath: string, data: ArrayBuffer, options?: DataWriteOptions) => Promise<void>\n")),(0,n.kt)("h3",{id:"append"},"append"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"append: (normalizedPath: string, data: string, options?: DataWriteOptions) => Promise<void>\n")),(0,n.kt)("h3",{id:"getresourcepath"},"getResourcePath"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getResourcePath: (normalizedPath: string) => string\n")),(0,n.kt)("h3",{id:"mkdir"},"mkdir"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"mkdir: (normalizedPath: string) => Promise<void>\n")),(0,n.kt)("h3",{id:"trashsystem"},"trashSystem"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"trashSystem: (normalizedPath: string) => Promise<boolean>\n")),(0,n.kt)("h3",{id:"trashlocal"},"trashLocal"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"trashLocal: (normalizedPath: string) => Promise<void>\n")),(0,n.kt)("h3",{id:"rmdir"},"rmdir"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"rmdir: (normalizedPath: string, recursive: boolean) => Promise<void>\n")),(0,n.kt)("h3",{id:"remove"},"remove"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"remove: (normalizedPath: string) => Promise<void>\n")),(0,n.kt)("h3",{id:"rename"},"rename"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"rename: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")),(0,n.kt)("h3",{id:"copy"},"copy"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"copy: (normalizedPath: string, normalizedNewPath: string) => Promise<void>\n")))}c.isMDXComponent=!0}}]);