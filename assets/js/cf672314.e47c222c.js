"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[8568],{6215:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));r(1839);const s={},i="FileManager",l={unversionedId:"reference/typescript/classes/FileManager",id:"reference/typescript/classes/FileManager",title:"FileManager",description:"Manage the creation, deletion and renaming of files from the UI.",source:"@site/docs/reference/typescript/classes/FileManager.md",sourceDirName:"reference/typescript/classes",slug:"/reference/typescript/classes/FileManager",permalink:"/obsidian-plugin-docs/reference/typescript/classes/FileManager",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/reference/typescript/classes/FileManager.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"ExtraButtonComponent",permalink:"/obsidian-plugin-docs/reference/typescript/classes/ExtraButtonComponent"},next:{title:"FileSystemAdapter",permalink:"/obsidian-plugin-docs/reference/typescript/classes/FileSystemAdapter"}},o={},c=[{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"getNewFileParent",id:"getnewfileparent",level:3},{value:"renameFile",id:"renamefile",level:3},{value:"generateMarkdownLink",id:"generatemarkdownlink",level:3},{value:"processFrontMatter",id:"processfrontmatter",level:3}],d={toc:c};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"filemanager"},"FileManager"),(0,a.kt)("p",null,"Manage the creation, deletion and renaming of files from the UI."),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"constructor();\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"getnewfileparent"},"getNewFileParent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"getNewFileParent(sourcePath: string): TFolder;\n")),(0,a.kt)("p",null,"Gets the folder that new files should be saved to, given the user's preferences."),(0,a.kt)("h3",{id:"renamefile"},"renameFile"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"renameFile(file: TAbstractFile, newPath: string): Promise<void>;\n")),(0,a.kt)("p",null,"Rename or move a file safely, and update all links to it depending on the user's preferences."),(0,a.kt)("h3",{id:"generatemarkdownlink"},"generateMarkdownLink"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"generateMarkdownLink(file: TFile, sourcePath: string, subpath?: string, alias?: string): string;\n")),(0,a.kt)("p",null,"Generate a markdown link based on the user's preferences."),(0,a.kt)("h3",{id:"processfrontmatter"},"processFrontMatter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"processFrontMatter(file: TFile, fn: (frontMatter: any) => void): Promise<void>;\n")),(0,a.kt)("p",null,"Atomically read, modify, and save the frontmatter of a note.\nThe frontmatter is passed in as a JS object, and should be mutated directly to achieve the desired result."),(0,a.kt)("p",null,"Remember to handle errors thrown by this method."))}p.isMDXComponent=!0}}]);