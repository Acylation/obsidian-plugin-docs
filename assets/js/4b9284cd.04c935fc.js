"use strict";(self.webpackChunkobsidian_plugin_docs=self.webpackChunkobsidian_plugin_docs||[]).push([[4109],{2467:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));a(1839);const l={sidebar_position:40},o="Vault",s={unversionedId:"vault",id:"vault",title:"Vault",description:"From the official documentation on Working with multiple Vaults:",source:"@site/docs/vault.md",sourceDirName:".",slug:"/vault",permalink:"/obsidian-plugin-docs/vault",draft:!1,editUrl:"https://github.com/marcusolsson/obsidian-plugin-docs/edit/main/docs/vault.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"docs",previous:{title:"Markdown post processing",permalink:"/obsidian-plugin-docs/editor/markdown-post-processing"},next:{title:"Events",permalink:"/obsidian-plugin-docs/events"}},r={},d=[{value:"Read files",id:"read-files",level:2},{value:"Delete files",id:"delete-files",level:2},{value:"Is it a file or folder?",id:"is-it-a-file-or-folder",level:2}],p={toc:d};function c(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vault"},"Vault"),(0,i.kt)("p",null,"From the official documentation on ",(0,i.kt)("a",{parentName:"p",href:"https://help.obsidian.md/How+to/Working+with+multiple+vaults"},"Working with multiple Vaults"),":"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Each collection of notes in Obsidian is known as a Vault. A Vault consists of a folder, and any sub-folders within it.")),(0,i.kt)("p",null,"While your plugin can access the file system like any other Node.js application, the ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault"},(0,i.kt)("inlineCode",{parentName:"a"},"Vault"))," module aims to make it easier to work with files and folders within a Vault."),(0,i.kt)("p",null,"The following example recursively prints the paths of all Markdown files in a Vault:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const files = this.app.vault.getMarkdownFiles()\n\nfor (let i = 0; i < files.length; i++) {\n  console.log(files[i].path);\n}\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you want to list ",(0,i.kt)("em",{parentName:"p"},"all")," files, and not just Markdown documents, use ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault#getfiles"},(0,i.kt)("inlineCode",{parentName:"a"},"getFiles()"))," instead.")),(0,i.kt)("h2",{id:"read-files"},"Read files"),(0,i.kt)("p",null,"There are two methods for reading the content of a file: ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault#read"},(0,i.kt)("inlineCode",{parentName:"a"},"read()"))," and ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault#cachedread"},(0,i.kt)("inlineCode",{parentName:"a"},"cachedRead()")),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you only want to display the content to the user, then use ",(0,i.kt)("inlineCode",{parentName:"li"},"cachedRead()")," to avoid reading the file from disk multiple times."),(0,i.kt)("li",{parentName:"ul"},"If you want to read the content, change it, and then write it back to disk, then use ",(0,i.kt)("inlineCode",{parentName:"li"},"read()")," to avoid potentially overwriting the file with a stale copy.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The only difference between ",(0,i.kt)("inlineCode",{parentName:"p"},"cachedRead()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"read()")," is when the file was modified outside of Obsidian just before the plugin reads it. As soon as the file system notifies Obsidian that the file has changed from the outside, ",(0,i.kt)("inlineCode",{parentName:"p"},"cachedRead()")," behaves ",(0,i.kt)("em",{parentName:"p"},"exactly")," like ",(0,i.kt)("inlineCode",{parentName:"p"},"read()"),". Similarly, if you save the file within Obsidian, the read cache is flushed as well.")),(0,i.kt)("p",null,"The following example reads the content of all Markdown files in the Vault and returns the average document size:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="main.ts"',title:'"main.ts"'},'import { Notice, Plugin } from "obsidian";\n\nexport default class ExamplePlugin extends Plugin {\n  async onload() {\n    this.addRibbonIcon("info", "Calculate average file length", async () => {\n      const fileLength = await this.averageFileLength();\n      new Notice(`The average file length is ${fileLength} characters.`);\n    });\n  }\n\n  async averageFileLength(): Promise<number> {\n    const { vault } = this.app;\n\n    const fileContents: string[] = await Promise.all(\n      vault.getMarkdownFiles().map((file) => vault.cachedRead(file))\n    );\n\n    let totalLength = 0;\n    fileContents.forEach((content) => {\n      totalLength += content.length;\n    });\n\n    return totalLength / fileContents.length;\n  }\n}\n')),(0,i.kt)("h2",{id:"delete-files"},"Delete files"),(0,i.kt)("p",null,"There are two methods to delete a file, ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault#delete"},(0,i.kt)("inlineCode",{parentName:"a"},"delete()")),", and ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/Vault#trash"},(0,i.kt)("inlineCode",{parentName:"a"},"trash()")),". Which one you should use depends on if you want to allow the user to change their mind."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delete()")," removes the file without a trace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"trash()")," moves the file to the trash bin.")),(0,i.kt)("p",null,"When you use ",(0,i.kt)("inlineCode",{parentName:"p"},"trash()"),", you have the option to move the file to the system's trash bin, or to a local  ",(0,i.kt)("inlineCode",{parentName:"p"},".trash")," folder at the root of the user's Vault."),(0,i.kt)("h2",{id:"is-it-a-file-or-folder"},"Is it a file or folder?"),(0,i.kt)("p",null,"Some operations return or accept a ",(0,i.kt)("a",{parentName:"p",href:"/obsidian-plugin-docs/reference/typescript/classes/TAbstractFile"},(0,i.kt)("inlineCode",{parentName:"a"},"TAbstractFile"))," object, which can be either a file or a folder. Always check the concrete type of a ",(0,i.kt)("inlineCode",{parentName:"p"},"TAbstractFile")," before you use it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const folderOrFile = this.app.vault.getAbstractFileByPath("folderOrFile");\n\nif (folderOrFile instanceof TFile) {\n  console.log("It\'s a file!");\n} else if (folderOrFile instanceof TFolder) {\n  console.log("It\'s a folder!");\n}\n')))}c.isMDXComponent=!0}}]);